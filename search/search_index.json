{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SocioPatterns utilities Documentation for usefull utilities used to investigate temporal Networks","title":"Home"},{"location":"#sociopatterns-utilities","text":"Documentation for usefull utilities used to investigate temporal Networks","title":"SocioPatterns utilities"},{"location":"construction/","text":"Construction import the library using import construction load_data construction.load_data(path) Input Path = String specifing the input file. Output Data = np.ndarray of elements, each line is an entry af the array. individuals construction.individuals(data) Input Data = The loaded input file. Output An unique list of people in the input data. split_input_data construction.split_input_data(data, gap=19) Input Data = The loaded input file. gap = gap of time used to separate the data. Output An multidimensional array, where each array represent the interacion among entries in the specified gap of time. build_graphs construction.build_graphs(data,gap=19) Input data = The loaded input file. gap = gap of time used to separate the data. Output Graphs = An array, where each entry is a nx.Graph() that represent the interacion among entries in the specified gap of time. pos = The networkx position of each node in the graph layout, it is used if you want to use also the funciont plot_graphs . build_weighted_graph construction.build\\_weighted\\_graph(data,gap) Input Data = The loaded input file. gap = gap of time used to separate the data. Output Return a Graph of interaction of people. Each edge has a weight equal to the count of interaction between the nodes within the gap of time. build_weighted_graph_2 construction.build\\_weighted\\_graph\\_2(data,gap) Input Data = The loaded input file. gap = gap of time used to separate the data. Output Return a Graph of interaction of people. Each edge has a weight equal to the count of interaction between the nodes, consecutive interconnections does not twice.","title":"Construction"},{"location":"construction/#construction","text":"import the library using import construction","title":"Construction"},{"location":"construction/#load_data","text":"construction.load_data(path) Input Path = String specifing the input file. Output Data = np.ndarray of elements, each line is an entry af the array.","title":"load_data"},{"location":"construction/#individuals","text":"construction.individuals(data) Input Data = The loaded input file. Output An unique list of people in the input data.","title":"individuals"},{"location":"construction/#split_input_data","text":"construction.split_input_data(data, gap=19) Input Data = The loaded input file. gap = gap of time used to separate the data. Output An multidimensional array, where each array represent the interacion among entries in the specified gap of time.","title":"split_input_data"},{"location":"construction/#build_graphs","text":"construction.build_graphs(data,gap=19) Input data = The loaded input file. gap = gap of time used to separate the data. Output Graphs = An array, where each entry is a nx.Graph() that represent the interacion among entries in the specified gap of time. pos = The networkx position of each node in the graph layout, it is used if you want to use also the funciont plot_graphs .","title":"build_graphs"},{"location":"construction/#build_weighted_graph","text":"construction.build\\_weighted\\_graph(data,gap) Input Data = The loaded input file. gap = gap of time used to separate the data. Output Return a Graph of interaction of people. Each edge has a weight equal to the count of interaction between the nodes within the gap of time.","title":"build_weighted_graph"},{"location":"construction/#build_weighted_graph_2","text":"construction.build\\_weighted\\_graph\\_2(data,gap) Input Data = The loaded input file. gap = gap of time used to separate the data. Output Return a Graph of interaction of people. Each edge has a weight equal to the count of interaction between the nodes, consecutive interconnections does not twice.","title":"build_weighted_graph_2"},{"location":"utilities/","text":"Utilities import the library using import utilities load_data utilities.load_data(path) Input Path = String specifing the input file. Output Data = np.ndarray of elements, each line is an entry af the array. individuals utilities.individuals(data) Input Data = The loaded input file. Output An unique list of people in the input data. split_input_data utilities.split_input_data(data, gap=19) Input Data = The loaded input file. gap = gap of time used to separate the data. Output An multidimensional array, where each array represent the interacion among entries in the specified gap of time. build_graphs utilities.build_graphs(data,gap=19) Input data = The loaded input file. gap = gap of time used to separate the data. Output Graphs = An array, where each entry is a nx.Graph() that represent the interacion among entries in the specified gap of time. pos = The networkx position of each node in the graph layout, it is used if you want to use also the funciont plot_graphs . plot_graphs utilities.plot_graphs(graphs, splitted\\_data,pos) Input graphs = An array of nx.Graphs. splitted_data = multidimensional array containing the splitted input file pos = The nx.position returned by the function build_graphs Output Plots N graphs, each graph shows the interactions that happened in the gap of time. It also plots the histogram of the interactions, highlighting the current time. build_weighted_graph utilities.build\\_weighted\\_graph(data,gap) Input Data = The loaded input file. gap = gap of time used to separate the data. Output Return a Graph of interaction of people. Each edge has a weight equal to the count of interaction between the nodes within the gap of time. build_weighted_graph_2 utilities.build\\_weighted\\_graph\\_2(data,gap) Input Data = The loaded input file. gap = gap of time used to separate the data. Output Return a Graph of interaction of people. Each edge has a weight equal to the count of interaction between the nodes, consecutive interconnections does not twice.","title":"Utilities"},{"location":"utilities/#utilities","text":"import the library using import utilities","title":"Utilities"},{"location":"utilities/#load_data","text":"utilities.load_data(path) Input Path = String specifing the input file. Output Data = np.ndarray of elements, each line is an entry af the array.","title":"load_data"},{"location":"utilities/#individuals","text":"utilities.individuals(data) Input Data = The loaded input file. Output An unique list of people in the input data.","title":"individuals"},{"location":"utilities/#split_input_data","text":"utilities.split_input_data(data, gap=19) Input Data = The loaded input file. gap = gap of time used to separate the data. Output An multidimensional array, where each array represent the interacion among entries in the specified gap of time.","title":"split_input_data"},{"location":"utilities/#build_graphs","text":"utilities.build_graphs(data,gap=19) Input data = The loaded input file. gap = gap of time used to separate the data. Output Graphs = An array, where each entry is a nx.Graph() that represent the interacion among entries in the specified gap of time. pos = The networkx position of each node in the graph layout, it is used if you want to use also the funciont plot_graphs .","title":"build_graphs"},{"location":"utilities/#plot_graphs","text":"utilities.plot_graphs(graphs, splitted\\_data,pos) Input graphs = An array of nx.Graphs. splitted_data = multidimensional array containing the splitted input file pos = The nx.position returned by the function build_graphs Output Plots N graphs, each graph shows the interactions that happened in the gap of time. It also plots the histogram of the interactions, highlighting the current time.","title":"plot_graphs"},{"location":"utilities/#build_weighted_graph","text":"utilities.build\\_weighted\\_graph(data,gap) Input Data = The loaded input file. gap = gap of time used to separate the data. Output Return a Graph of interaction of people. Each edge has a weight equal to the count of interaction between the nodes within the gap of time.","title":"build_weighted_graph"},{"location":"utilities/#build_weighted_graph_2","text":"utilities.build\\_weighted\\_graph\\_2(data,gap) Input Data = The loaded input file. gap = gap of time used to separate the data. Output Return a Graph of interaction of people. Each edge has a weight equal to the count of interaction between the nodes, consecutive interconnections does not twice.","title":"build_weighted_graph_2"}]}