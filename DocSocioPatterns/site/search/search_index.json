{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"construction/","text":"Construction Import the library using import construction split_data_in_groups construction.split_data_in_groups(path_data,path_metadata) Input path_data = path of the input data. path_metadata = path of the input metadata Output gropus = a dictionary [group : data], where group is the name taken from the metadata, while data are the data related to a sepcific group. load_data construction.load_data(path) Input path = path of the input data. Output data = np.ndarray of the loaded data. Each row t,i,j represent the interaction among node i and node j at time t. individuals construction.individuals(path) Input data = The loaded file. Output individuals = np.ndarray of individuals in the dataset. build_weighted_graph construction.build_weighted_graph(data,gap=19) Input data = The loaded file. gap = A gap of time. Output Graph = It returns a weighted nx.Graph, where the weight on a edge i-j represent the number of interactions among node i and node j. build_weighted_graph_2 construction.build_weighted_graph_2(data,gap=19) Input data = The loaded file. gap = A gap of time. Output Graph = It returns a weighted nx.Graph, where the weight on a edge i-j represent the number of interactions among node i and node j. With this construction, consecutive interaction are counted as a single interaction. build_graphs construction.build_graphs(data,gap=19) Input data = The loaded file. gap = A gap of time. Output array of Graphs = It returns an array of graphs, each graph represent the interaction of nodes, within time t and time t+gap. split_input_data construction.split_input_data(data, gap=19) Input data = The loaded file. gap = A gap of time. Output np.array = an array of data, each element represent the interaction within the gap of time.","title":"Construction"},{"location":"construction/#construction","text":"Import the library using import construction","title":"Construction"},{"location":"construction/#split_data_in_groups","text":"construction.split_data_in_groups(path_data,path_metadata)","title":"split_data_in_groups"},{"location":"construction/#input","text":"path_data = path of the input data. path_metadata = path of the input metadata","title":"Input"},{"location":"construction/#output","text":"gropus = a dictionary [group : data], where group is the name taken from the metadata, while data are the data related to a sepcific group.","title":"Output"},{"location":"construction/#load_data","text":"construction.load_data(path)","title":"load_data"},{"location":"construction/#input_1","text":"path = path of the input data.","title":"Input"},{"location":"construction/#output_1","text":"data = np.ndarray of the loaded data. Each row t,i,j represent the interaction among node i and node j at time t.","title":"Output"},{"location":"construction/#individuals","text":"construction.individuals(path)","title":"individuals"},{"location":"construction/#input_2","text":"data = The loaded file.","title":"Input"},{"location":"construction/#output_2","text":"individuals = np.ndarray of individuals in the dataset.","title":"Output"},{"location":"construction/#build_weighted_graph","text":"construction.build_weighted_graph(data,gap=19)","title":"build_weighted_graph"},{"location":"construction/#input_3","text":"data = The loaded file. gap = A gap of time.","title":"Input"},{"location":"construction/#output_3","text":"Graph = It returns a weighted nx.Graph, where the weight on a edge i-j represent the number of interactions among node i and node j.","title":"Output"},{"location":"construction/#build_weighted_graph_2","text":"construction.build_weighted_graph_2(data,gap=19)","title":"build_weighted_graph_2"},{"location":"construction/#input_4","text":"data = The loaded file. gap = A gap of time.","title":"Input"},{"location":"construction/#output_4","text":"Graph = It returns a weighted nx.Graph, where the weight on a edge i-j represent the number of interactions among node i and node j. With this construction, consecutive interaction are counted as a single interaction.","title":"Output"},{"location":"construction/#build_graphs","text":"construction.build_graphs(data,gap=19)","title":"build_graphs"},{"location":"construction/#input_5","text":"data = The loaded file. gap = A gap of time.","title":"Input"},{"location":"construction/#output_5","text":"array of Graphs = It returns an array of graphs, each graph represent the interaction of nodes, within time t and time t+gap.","title":"Output"},{"location":"construction/#split_input_data","text":"construction.split_input_data(data, gap=19)","title":"split_input_data"},{"location":"construction/#input_6","text":"data = The loaded file. gap = A gap of time.","title":"Input"},{"location":"construction/#output_6","text":"np.array = an array of data, each element represent the interaction within the gap of time.","title":"Output"},{"location":"data/","text":"Data sets The data sets can be downloaded from sociopatterns.org or from Drive(Antonio-Giulia) LH10.dat Hospital interactions Format t , i , j - at time t interaction among node i and node j. 5 Categories: Admin Etude Med Paramed Patient InVS13.dat Workplace 2013 interactions Format t , i , j - at time t interaction among node i and node j. 5 Categories: DISQ DMCT DSE SFLE SRH InVS15.dat Workplace 2015 interactions Format t , i , j - at time t interaction among node i and node j. 12 Categories: DCAR DG DISQ DMCT DMI DSE DST SCOM SDOC SFLE SRH SSI LyonSchool.dat Elementay school interactions Format t , i , j - at time t interaction among node i and node j. 11 Categories: ce1a ce1b ce2a ce2b cm1a cm1b cm2a cm2b cpa cpb teachers Thiers13.dat High school interactions Format t , i , j - at time t interaction among node i and node j. 9 Categories: 2BIO1 2BIO2 2BIO3 MP MPst1 MPst2 PC PCst PSIst","title":"Data sets"},{"location":"data/#data-sets","text":"The data sets can be downloaded from sociopatterns.org or from Drive(Antonio-Giulia)","title":"Data sets"},{"location":"data/#lh10dat","text":"Hospital interactions","title":"LH10.dat"},{"location":"data/#format","text":"t , i , j - at time t interaction among node i and node j.","title":"Format"},{"location":"data/#5-categories","text":"Admin Etude Med Paramed Patient","title":"5 Categories:"},{"location":"data/#invs13dat","text":"Workplace 2013 interactions","title":"InVS13.dat"},{"location":"data/#format_1","text":"t , i , j - at time t interaction among node i and node j.","title":"Format"},{"location":"data/#5-categories_1","text":"DISQ DMCT DSE SFLE SRH","title":"5 Categories:"},{"location":"data/#invs15dat","text":"Workplace 2015 interactions","title":"InVS15.dat"},{"location":"data/#format_2","text":"t , i , j - at time t interaction among node i and node j.","title":"Format"},{"location":"data/#12-categories","text":"DCAR DG DISQ DMCT DMI DSE DST SCOM SDOC SFLE SRH SSI","title":"12 Categories:"},{"location":"data/#lyonschooldat","text":"Elementay school interactions","title":"LyonSchool.dat"},{"location":"data/#format_3","text":"t , i , j - at time t interaction among node i and node j.","title":"Format"},{"location":"data/#11-categories","text":"ce1a ce1b ce2a ce2b cm1a cm1b cm2a cm2b cpa cpb teachers","title":"11 Categories:"},{"location":"data/#thiers13dat","text":"High school interactions","title":"Thiers13.dat"},{"location":"data/#format_4","text":"t , i , j - at time t interaction among node i and node j.","title":"Format"},{"location":"data/#9-categories","text":"2BIO1 2BIO2 2BIO3 MP MPst1 MPst2 PC PCst PSIst","title":"9 Categories:"},{"location":"multipleDataset/","text":"Analysis on multiple data sets Can be used to plot several properties of a set of data sets. import multipleDatasetAnalysis as man plot_assortativivity_weights_graphs man.plot_assortativity_weight(data_sets,gap=19,name_dataset=None,color=\"blue\",figsize=(5,5),s=3) Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. Output Plot the assortativity concerning the weights for each data set. plot_assortativivity_degree_graphs man.plot_assortativity_degree(data_sets,gap=19,name_dataset=None,color=\"blue\",figsize=(5,5),s=3) Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. Output Plot the assortativity concerning the degrees for each data set. plot_dist_eigvals_graphs man.plot_dist_eigvals_graphs(data_sets,binary_adj_matrix=False,gap=19,bins=40,figsize=(18,12),s=3,color=\"blue\",save=False) Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. binary_adj_matrix = if it is false then it uses the weighted adj matrix, while if it is true then it uses the binary adj matrix. Output Plot the histogram of the eigenvalues for each data set. plot_dist_degree_graphs man.plot_dist_degree_graphs(data_sets,normed=True,density=True,gap=19,bins=40,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the degrees for each data set. plot_dist_weights_graphs man.plot_dist_weights_graphs(data_sets,normed=True,density=True,gap=19,bins=40,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the weights for each data set. plot_dist_neigh_weights_graphs man.plot_dist_neigh_weights_graphs(data_sets,normed=True,density=True,gap=19,bins=40,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the weights of the neighbours of a node for each data set. plot_dist_closeness_cent_graphs man.plot_dist_closeness_cent_graphs(data_sets,gap=19,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the closeness centrality of the nodes for each data set. plot_dist_between_cent_graphs man.plot_dist_between_cent_graphs(data_sets,gap=19,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the betweeness centrality of the nodes for each data set. plot_dist_clust_coeff_graphs man.plot_dist_clust_coeff_graphs(data_sets,gap=19,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the clustering coefficients of the nodes for each data set.","title":"Analysis on multiple data sets"},{"location":"multipleDataset/#analysis-on-multiple-data-sets","text":"Can be used to plot several properties of a set of data sets. import multipleDatasetAnalysis as man","title":"Analysis on multiple data sets"},{"location":"multipleDataset/#plot_assortativivity_weights_graphs","text":"man.plot_assortativity_weight(data_sets,gap=19,name_dataset=None,color=\"blue\",figsize=(5,5),s=3)","title":"plot_assortativivity_weights_graphs"},{"location":"multipleDataset/#input","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets.","title":"Input"},{"location":"multipleDataset/#output","text":"Plot the assortativity concerning the weights for each data set.","title":"Output"},{"location":"multipleDataset/#plot_assortativivity_degree_graphs","text":"man.plot_assortativity_degree(data_sets,gap=19,name_dataset=None,color=\"blue\",figsize=(5,5),s=3)","title":"plot_assortativivity_degree_graphs"},{"location":"multipleDataset/#input_1","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets.","title":"Input"},{"location":"multipleDataset/#output_1","text":"Plot the assortativity concerning the degrees for each data set.","title":"Output"},{"location":"multipleDataset/#plot_dist_eigvals_graphs","text":"man.plot_dist_eigvals_graphs(data_sets,binary_adj_matrix=False,gap=19,bins=40,figsize=(18,12),s=3,color=\"blue\",save=False)","title":"plot_dist_eigvals_graphs"},{"location":"multipleDataset/#input_2","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. binary_adj_matrix = if it is false then it uses the weighted adj matrix, while if it is true then it uses the binary adj matrix.","title":"Input"},{"location":"multipleDataset/#output_2","text":"Plot the histogram of the eigenvalues for each data set.","title":"Output"},{"location":"multipleDataset/#plot_dist_degree_graphs","text":"man.plot_dist_degree_graphs(data_sets,normed=True,density=True,gap=19,bins=40,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_degree_graphs"},{"location":"multipleDataset/#input_3","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"multipleDataset/#output_3","text":"Plot the histogram of the degrees for each data set.","title":"Output"},{"location":"multipleDataset/#plot_dist_weights_graphs","text":"man.plot_dist_weights_graphs(data_sets,normed=True,density=True,gap=19,bins=40,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_weights_graphs"},{"location":"multipleDataset/#input_4","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"multipleDataset/#output_4","text":"Plot the histogram of the weights for each data set.","title":"Output"},{"location":"multipleDataset/#plot_dist_neigh_weights_graphs","text":"man.plot_dist_neigh_weights_graphs(data_sets,normed=True,density=True,gap=19,bins=40,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_neigh_weights_graphs"},{"location":"multipleDataset/#input_5","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"multipleDataset/#output_5","text":"Plot the histogram of the weights of the neighbours of a node for each data set.","title":"Output"},{"location":"multipleDataset/#plot_dist_closeness_cent_graphs","text":"man.plot_dist_closeness_cent_graphs(data_sets,gap=19,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_closeness_cent_graphs"},{"location":"multipleDataset/#input_6","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"multipleDataset/#output_6","text":"Plot the histogram of the closeness centrality of the nodes for each data set.","title":"Output"},{"location":"multipleDataset/#plot_dist_between_cent_graphs","text":"man.plot_dist_between_cent_graphs(data_sets,gap=19,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_between_cent_graphs"},{"location":"multipleDataset/#input_7","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"multipleDataset/#output_7","text":"Plot the histogram of the betweeness centrality of the nodes for each data set.","title":"Output"},{"location":"multipleDataset/#plot_dist_clust_coeff_graphs","text":"man.plot_dist_clust_coeff_graphs(data_sets,gap=19,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_clust_coeff_graphs"},{"location":"multipleDataset/#input_8","text":"data_sets = An array of loaded data sets. gap = gap of time used to split the data sets. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"multipleDataset/#output_8","text":"Plot the histogram of the clustering coefficients of the nodes for each data set.","title":"Output"},{"location":"singleDataset/","text":"Analysis on single data set Can be used to plot several properties of a data set. import singleDatasetAnalysis as san plot_weighted_graph san.plot_weighted_graph(graph, pos, node_size=70) Input graph = A weighted networkx graph. pos = networkx position. node_size = size of the plotted nodes. Output Plot the graph where the width of the edge represent the number of interactions. plot_assortativity_weight san.plot_assortativity_weight(graph,name_dataset=None,color=\"blue\",figsize=(5,5),s=3) Input graph = A weighted networkx graph. Output Plot the assortativity concerning the weights. plot_assortativity_degree san.plot_assortativity_degree(graph,name_dataset=None,color=\"blue\",figsize=(5,5),s=3) Input graph = A networkx graph. Output Plot the assortativity concerning the degree. plot_dist_eigvals san.plot_dist_eigvals(graph,binary_adj_matrix=False,name_dataset=None,bins=40,color=\"blue\",figsize=(5,5)) Input graph = A networkx graph. binary_adj_matrix = if it is false then it uses the weighted adj matrix, while if it is true then it uses the binary adj matrix. Output Plot the histogram of the eigenvalues. plot_dist_degree san.plot_dist_degree(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the degrees. plot_dist_weights san.plot_dist_weights(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the weights. plot_dist_neig_weights san.plot_dist_neig_weights(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the weights of the neighbours of a node. plot_dist_weights_gaps san.plot_dist_weights_gaps(data,gaps,density=True,name_dataset=None,bins=40,figsize=(5,5)) Input data = the input file. gaps = a list of different gaps that are tested. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the weights for different gaps using different colors. plot_dist_closeness_cent san.plot_dist_closeness_cent(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the closeness centrality of the nodes. plot_dist_between_cent san.plot_dist_between_cent(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the betweeness centrality of the nodes. plot_dist_clust_coeff san.plot_dist_between_cent(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3): Input graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...) Output Plot the histogram of the clustering coefficients of the nodes. summary san.summary(graphs,data,name_dataset,gaps) Input graph = A networkx graph. data = the input data. gaps = a list of different gaps that are tested. Output Plot all the previous plots and prints spectral gap.","title":"Analysis on single data set"},{"location":"singleDataset/#analysis-on-single-data-set","text":"Can be used to plot several properties of a data set. import singleDatasetAnalysis as san","title":"Analysis on single data set"},{"location":"singleDataset/#plot_weighted_graph","text":"san.plot_weighted_graph(graph, pos, node_size=70)","title":"plot_weighted_graph"},{"location":"singleDataset/#input","text":"graph = A weighted networkx graph. pos = networkx position. node_size = size of the plotted nodes.","title":"Input"},{"location":"singleDataset/#output","text":"Plot the graph where the width of the edge represent the number of interactions.","title":"Output"},{"location":"singleDataset/#plot_assortativity_weight","text":"san.plot_assortativity_weight(graph,name_dataset=None,color=\"blue\",figsize=(5,5),s=3)","title":"plot_assortativity_weight"},{"location":"singleDataset/#input_1","text":"graph = A weighted networkx graph.","title":"Input"},{"location":"singleDataset/#output_1","text":"Plot the assortativity concerning the weights.","title":"Output"},{"location":"singleDataset/#plot_assortativity_degree","text":"san.plot_assortativity_degree(graph,name_dataset=None,color=\"blue\",figsize=(5,5),s=3)","title":"plot_assortativity_degree"},{"location":"singleDataset/#input_2","text":"graph = A networkx graph.","title":"Input"},{"location":"singleDataset/#output_2","text":"Plot the assortativity concerning the degree.","title":"Output"},{"location":"singleDataset/#plot_dist_eigvals","text":"san.plot_dist_eigvals(graph,binary_adj_matrix=False,name_dataset=None,bins=40,color=\"blue\",figsize=(5,5))","title":"plot_dist_eigvals"},{"location":"singleDataset/#input_3","text":"graph = A networkx graph. binary_adj_matrix = if it is false then it uses the weighted adj matrix, while if it is true then it uses the binary adj matrix.","title":"Input"},{"location":"singleDataset/#output_3","text":"Plot the histogram of the eigenvalues.","title":"Output"},{"location":"singleDataset/#plot_dist_degree","text":"san.plot_dist_degree(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_degree"},{"location":"singleDataset/#input_4","text":"graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"singleDataset/#output_4","text":"Plot the histogram of the degrees.","title":"Output"},{"location":"singleDataset/#plot_dist_weights","text":"san.plot_dist_weights(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_weights"},{"location":"singleDataset/#input_5","text":"graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"singleDataset/#output_5","text":"Plot the histogram of the weights.","title":"Output"},{"location":"singleDataset/#plot_dist_neig_weights","text":"san.plot_dist_neig_weights(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_neig_weights"},{"location":"singleDataset/#input_6","text":"graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"singleDataset/#output_6","text":"Plot the histogram of the weights of the neighbours of a node.","title":"Output"},{"location":"singleDataset/#plot_dist_weights_gaps","text":"san.plot_dist_weights_gaps(data,gaps,density=True,name_dataset=None,bins=40,figsize=(5,5))","title":"plot_dist_weights_gaps"},{"location":"singleDataset/#input_7","text":"data = the input file. gaps = a list of different gaps that are tested. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"singleDataset/#output_7","text":"Plot the histogram of the weights for different gaps using different colors.","title":"Output"},{"location":"singleDataset/#plot_dist_closeness_cent","text":"san.plot_dist_closeness_cent(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_closeness_cent"},{"location":"singleDataset/#input_8","text":"graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"singleDataset/#output_8","text":"Plot the histogram of the closeness centrality of the nodes.","title":"Output"},{"location":"singleDataset/#plot_dist_between_cent","text":"san.plot_dist_between_cent(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_between_cent"},{"location":"singleDataset/#input_9","text":"graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"singleDataset/#output_9","text":"Plot the histogram of the betweeness centrality of the nodes.","title":"Output"},{"location":"singleDataset/#plot_dist_clust_coeff","text":"san.plot_dist_between_cent(graph,normed=True,density=True,name_dataset=None,color=\"blue\",figsize=(5,5),s=3):","title":"plot_dist_clust_coeff"},{"location":"singleDataset/#input_10","text":"graph = A networkx graph. normed = If it is true, the values are normalized. density = plt.hist(..., densty, ...)","title":"Input"},{"location":"singleDataset/#output_10","text":"Plot the histogram of the clustering coefficients of the nodes.","title":"Output"},{"location":"singleDataset/#summary","text":"san.summary(graphs,data,name_dataset,gaps)","title":"summary"},{"location":"singleDataset/#input_11","text":"graph = A networkx graph. data = the input data. gaps = a list of different gaps that are tested.","title":"Input"},{"location":"singleDataset/#output_11","text":"Plot all the previous plots and prints spectral gap.","title":"Output"},{"location":"utilities/","text":"Utility Import the library using import utilities get_weights utilities.get_weights(graph, dictionary = False) Input graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array of weights. Output weights = np.ndarray or dictionary of weights. get_neigh_weights utilities.get_neigh_weights(Graph, dictionary = False) Input graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array. Output weights = np.ndarray or dictionary of weights, where each weigth is the sum of the weights of the neighbours of the node. clustering_coeff utilities.clustering_coeff(Graph, dictionary = False) Input graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array. Output coeff = np.ndarray or dictionary of coefficients. betweenness_centrality utilities.betweenness_centrality(Graph, dictionary = False) Input graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array. Output coeff = np.ndarray or dictionary of values. betweenness_centrality utilities.betweenness_centrality(Graph, dictionary = False) Input graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array. Output coeff = np.ndarray or dictionary of values. spectral_gap utilities.spectral_gap(Graph, binary_adj_matrix=False) Input graph = A networkx graph. binary_adj_matrix = If it is true then returns the spectral gap using an unweighted adj matrix, while if it is false then returns the spectral gap computed using an adj matrix where the element in position i, j is equal to the weights on edge from node i to node j. Output spectral_gap = It returns a float representing the gap between the first and the second smallest eigenvalue. find_a_c_cut utilities.find_a_c_cut(data,min_bin=40,max_bin=150,interval=1) Input data = a file where you want to fit a power low. min_bin = smallest number of bins max_bin = largest number of bins intervals = np.arange(min_bin,max_bin,intervals) Output a = exponent of the fitted power low. c = constant of the fitted power low. cut = position\\ of where the power low is fitted.","title":"Utility"},{"location":"utilities/#utility","text":"Import the library using import utilities","title":"Utility"},{"location":"utilities/#get_weights","text":"utilities.get_weights(graph, dictionary = False)","title":"get_weights"},{"location":"utilities/#input","text":"graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array of weights.","title":"Input"},{"location":"utilities/#output","text":"weights = np.ndarray or dictionary of weights.","title":"Output"},{"location":"utilities/#get_neigh_weights","text":"utilities.get_neigh_weights(Graph, dictionary = False)","title":"get_neigh_weights"},{"location":"utilities/#input_1","text":"graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array.","title":"Input"},{"location":"utilities/#output_1","text":"weights = np.ndarray or dictionary of weights, where each weigth is the sum of the weights of the neighbours of the node.","title":"Output"},{"location":"utilities/#clustering_coeff","text":"utilities.clustering_coeff(Graph, dictionary = False)","title":"clustering_coeff"},{"location":"utilities/#input_2","text":"graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array.","title":"Input"},{"location":"utilities/#output_2","text":"coeff = np.ndarray or dictionary of coefficients.","title":"Output"},{"location":"utilities/#betweenness_centrality","text":"utilities.betweenness_centrality(Graph, dictionary = False)","title":"betweenness_centrality"},{"location":"utilities/#input_3","text":"graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array.","title":"Input"},{"location":"utilities/#output_3","text":"coeff = np.ndarray or dictionary of values.","title":"Output"},{"location":"utilities/#betweenness_centrality_1","text":"utilities.betweenness_centrality(Graph, dictionary = False)","title":"betweenness_centrality"},{"location":"utilities/#input_4","text":"graph = A networkx graph. dictionary = If it is true then returns a dictionary [node_id : weights]. If it is false then returns an np.array.","title":"Input"},{"location":"utilities/#output_4","text":"coeff = np.ndarray or dictionary of values.","title":"Output"},{"location":"utilities/#spectral_gap","text":"utilities.spectral_gap(Graph, binary_adj_matrix=False)","title":"spectral_gap"},{"location":"utilities/#input_5","text":"graph = A networkx graph. binary_adj_matrix = If it is true then returns the spectral gap using an unweighted adj matrix, while if it is false then returns the spectral gap computed using an adj matrix where the element in position i, j is equal to the weights on edge from node i to node j.","title":"Input"},{"location":"utilities/#output_5","text":"spectral_gap = It returns a float representing the gap between the first and the second smallest eigenvalue.","title":"Output"},{"location":"utilities/#find_a_c_cut","text":"utilities.find_a_c_cut(data,min_bin=40,max_bin=150,interval=1)","title":"find_a_c_cut"},{"location":"utilities/#input_6","text":"data = a file where you want to fit a power low. min_bin = smallest number of bins max_bin = largest number of bins intervals = np.arange(min_bin,max_bin,intervals)","title":"Input"},{"location":"utilities/#output_6","text":"a = exponent of the fitted power low. c = constant of the fitted power low. cut = position\\ of where the power low is fitted.","title":"Output"}]}